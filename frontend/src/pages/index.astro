---
/**
 * Dashboard Homepage
 * Head Office command center for managing distributors, products, and inventory
 */
import MainLayout from '../layouts/MainLayout.astro';
import StatCard from '../components/StatCard';
import DistributorCard from '../components/DistributorCard';
import AlertCard from '../components/AlertCard';
import MapView from '../components/MapView';
import ViewToggle from '../components/ViewToggle';

import {
  mockDashboardStats,
  mockLowStockAlerts,
  mockDistributors,
  mockRecentActivity,
  mockQuickActions,
} from '../utils/mockData';

// Calculate time-based greeting
const hour = new Date().getHours();
const greeting = hour < 12 ? 'Good morning' : hour < 18 ? 'Good afternoon' : 'Good evening';

// Get current date
const today = new Date().toLocaleDateString('en-MY', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});
---

<MainLayout title="Dashboard" currentPage="dashboard">
  <!-- Welcome Header -->
  <div class="mb-8">
    <h2 class="text-2xl font-bold text-gray-900 mb-1">
      {greeting}, Tien! üëã
    </h2>
    <p class="text-sm text-gray-600">
      {today} ‚Ä¢ Here's what's happening with your distribution network
    </p>
  </div>

  <!-- Overview Stats Cards -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <StatCard
      client:load
      icon="üì¶"
      label="Total Inventory"
      value={mockDashboardStats.totalInventory}
      subtext="Across all locations"
      color="blue"
    />

    <StatCard
      client:load
      icon="üë•"
      label="Active Distributors"
      value={`${mockDashboardStats.activeDistributors}/${mockDashboardStats.totalDistributors}`}
      subtext="All systems operational"
      color="green"
    />

    <StatCard
      client:load
      icon="‚ö†Ô∏è"
      label="Low Stock Alerts"
      value={mockDashboardStats.lowStockAlerts}
      subtext="Requires attention"
      color="yellow"
    />

    <StatCard
      client:load
      icon="üöö"
      label="Pending Transfers"
      value={mockDashboardStats.pendingTransfers}
      subtext="Awaiting processing"
      color="red"
    />
  </div>

  <!-- Critical Alerts Section -->
  <div class="mb-8">
    <div class="flex items-center justify-between mb-4">
      <div>
        <h3 class="text-xl font-bold text-gray-900">
          ‚ö†Ô∏è Critical Alerts
        </h3>
        <p class="text-sm text-gray-600">
          Products requiring immediate restocking
        </p>
      </div>
      <div class="flex space-x-2">
        <button class="px-4 py-2 bg-red-600 text-white text-sm font-semibold rounded-lg hover:bg-red-700 transition-colors">
          üì± Send Alerts
        </button>
        <a
          href="/inventory/low-stock"
          class="px-4 py-2 bg-white border border-gray-300 text-gray-700 text-sm font-semibold rounded-lg hover:bg-gray-50 transition-colors"
        >
          View All
        </a>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      {mockLowStockAlerts.slice(0, 4).map((alert) => (
        <AlertCard client:load alert={alert} />
      ))}
    </div>
  </div>

  <!-- Distributor Overview Section -->
  <div class="mb-8">
    <div class="flex items-center justify-between mb-4">
      <div>
        <h3 class="text-xl font-bold text-gray-900">
          üìç Distributor Status Overview
        </h3>
        <p class="text-sm text-gray-600">
          Real-time status of all 10 distributors across Melbourne
        </p>
      </div>
      <div class="flex items-center space-x-3">
        <ViewToggle client:load view="grid" onChange={(v) => console.log('View:', v)} />
        <a
          href="/distributors"
          class="px-4 py-2 bg-white border border-gray-300 text-gray-700 text-sm font-semibold rounded-lg hover:bg-gray-50 transition-colors"
        >
          View All ‚Üí
        </a>
      </div>
    </div>

    <!-- Grid View (default) -->
    <div id="grid-view" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
      {mockDistributors.map((distributor) => (
        <DistributorCard
          client:load
          distributor={distributor}
          onClick={() => console.log('Clicked:', distributor.code)}
        />
      ))}
    </div>

    <!-- Map View (placeholder - hidden by default) -->
    <div id="map-view" class="hidden">
      <MapView
        client:load
        distributors={mockDistributors}
        onDistributorClick={(d) => console.log('Map clicked:', d.code)}
      />
    </div>

    <!-- Distributor Summary Stats -->
    <div class="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4">
      <div class="bg-green-50 rounded-lg p-4 text-center">
        <p class="text-2xl font-bold text-green-700">
          {mockDistributors.filter((d) => d.status === 'healthy').length}
        </p>
        <p class="text-sm text-gray-600 mt-1">Healthy</p>
      </div>
      <div class="bg-yellow-50 rounded-lg p-4 text-center">
        <p class="text-2xl font-bold text-yellow-700">
          {mockDistributors.filter((d) => d.status === 'low_stock').length}
        </p>
        <p class="text-sm text-gray-600 mt-1">Low Stock</p>
      </div>
      <div class="bg-red-50 rounded-lg p-4 text-center">
        <p class="text-2xl font-bold text-red-700">
          {mockDistributors.filter((d) => d.status === 'critical').length}
        </p>
        <p class="text-sm text-gray-600 mt-1">Critical</p>
      </div>
      <div class="bg-gray-50 rounded-lg p-4 text-center">
        <p class="text-2xl font-bold text-gray-700">
          {mockDistributors.filter((d) => d.status === 'inactive').length}
        </p>
        <p class="text-sm text-gray-600 mt-1">Inactive</p>
      </div>
    </div>
  </div>

  <!-- Two Column Layout: Recent Activity + Quick Actions -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <!-- Recent Activity (2/3 width) -->
    <div class="lg:col-span-2">
      <div class="bg-white rounded-lg shadow border border-gray-200 p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-bold text-gray-900">
            üïí Recent Activity
          </h3>
          <a href="/activity" class="text-sm text-red-600 hover:text-red-700 font-semibold">
            View All ‚Üí
          </a>
        </div>

        <div class="space-y-4">
          {mockRecentActivity.map((activity) => (
            <div class="flex items-start space-x-3 pb-4 border-b border-gray-100 last:border-0">
              <!-- Activity Icon -->
              <div class="flex-shrink-0 w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center">
                <span class="text-xl">
                  {activity.type === 'transfer' && 'üöö'}
                  {activity.type === 'sms' && 'üì±'}
                  {activity.type === 'product' && 'üì¶'}
                  {activity.type === 'adjustment' && 'üìù'}
                </span>
              </div>

              <!-- Activity Details -->
              <div class="flex-1 min-w-0">
                <p class="text-sm text-gray-900 font-medium">
                  {activity.description}
                </p>
                <p class="text-xs text-gray-500 mt-1">
                  {activity.user && `${activity.user} ‚Ä¢ `}
                  {new Date(activity.timestamp).toLocaleString()}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Quick Actions (1/3 width) -->
    <div class="lg:col-span-1">
      <div class="bg-white rounded-lg shadow border border-gray-200 p-6">
        <h3 class="text-lg font-bold text-gray-900 mb-4">
          ‚ö° Quick Actions
        </h3>

        <div class="space-y-2">
          {mockQuickActions.map((action) => (
            <a
              href={action.href}
              class={`flex items-center space-x-3 p-3 rounded-lg border-2 border-gray-200 hover:border-${action.color}-500 hover:bg-${action.color}-50 transition-all group`}
            >
              <span class="text-2xl">{action.icon}</span>
              <span class="text-sm font-semibold text-gray-900 group-hover:text-${action.color}-700">
                {action.label}
              </span>
            </a>
          ))}
        </div>

        <!-- System Status -->
        <div class="mt-6 pt-6 border-t border-gray-200">
          <h4 class="text-sm font-bold text-gray-900 mb-3">
            System Status
          </h4>
          <div class="space-y-2">
            <div class="flex items-center justify-between text-xs">
              <span class="text-gray-600">API Server</span>
              <span class="flex items-center text-green-600">
                <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                Online
              </span>
            </div>
            <div class="flex items-center justify-between text-xs">
              <span class="text-gray-600">Database</span>
              <span class="flex items-center text-green-600">
                <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                Connected
              </span>
            </div>
            <div class="flex items-center justify-between text-xs">
              <span class="text-gray-600">SMS Service</span>
              <span class="flex items-center text-green-600">
                <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                Active
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>
