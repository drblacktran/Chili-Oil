---
/**
 * Dashboard Homepage
 * Head Office command center for managing distributors, products, and inventory
 * Simplified view with visual analytics and key metrics
 */
import MainLayout from '../layouts/MainLayout.astro';
import StatCard from '../components/StatCard';
import DistributorCard from '../components/DistributorCard';
import AlertCard from '../components/AlertCard';
import BarChart from '../components/BarChart';
import DonutChart from '../components/DonutChart';

import {
  mockDashboardStats,
  mockLowStockAlerts,
  mockDistributors,
  mockRecentActivity,
  mockQuickActions,
} from '../utils/mockData';
import { mockProductCategories } from '../utils/mockProducts';

// Prepare chart data
const distributorStatusData = [
  {
    label: 'Healthy',
    value: mockDistributors.filter(d => d.status === 'healthy').length,
    color: '#16A34A',
    icon: '‚úÖ'
  },
  {
    label: 'Low Stock',
    value: mockDistributors.filter(d => d.status === 'low_stock').length,
    color: '#EAB308',
    icon: '‚ö†Ô∏è'
  },
  {
    label: 'Critical',
    value: mockDistributors.filter(d => d.status === 'critical').length,
    color: '#DC2626',
    icon: 'üö®'
  },
];

const regionDistributionData = [
  {
    label: 'CBD',
    value: mockDistributors.filter(d => d.region === 'CBD').length,
    color: '#DC2626',
    icon: 'üèôÔ∏è'
  },
  {
    label: 'North',
    value: mockDistributors.filter(d => d.region === 'North').length,
    color: '#2563EB',
    icon: '‚¨ÜÔ∏è'
  },
  {
    label: 'South',
    value: mockDistributors.filter(d => d.region === 'South').length,
    color: '#16A34A',
    icon: '‚¨áÔ∏è'
  },
  {
    label: 'East',
    value: mockDistributors.filter(d => d.region === 'East').length,
    color: '#9333EA',
    icon: '‚û°Ô∏è'
  },
  {
    label: 'West',
    value: mockDistributors.filter(d => d.region === 'West').length,
    color: '#EA580C',
    icon: '‚¨ÖÔ∏è'
  },
  {
    label: 'South East',
    value: mockDistributors.filter(d => d.region === 'South East').length,
    color: '#CA8A04',
    icon: '‚ÜòÔ∏è'
  },
];

const productCategoryData = mockProductCategories.map(cat => ({
  label: cat.name,
  value: cat.productCount,
  color: cat.color || '#6B7280',
  icon: cat.icon,
}));

// Calculate time-based greeting
const hour = new Date().getHours();
const greeting = hour < 12 ? 'Good morning' : hour < 18 ? 'Good afternoon' : 'Good evening';

// Get current date
const today = new Date().toLocaleDateString('en-MY', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});
---

<MainLayout title="Dashboard" currentPage="dashboard">
  <!-- Welcome Header -->
  <div class="mb-8">
    <h2 class="text-2xl font-bold text-gray-900 mb-1">
      {greeting}, Tien! üëã
    </h2>
    <p class="text-sm text-gray-600">
      {today} ‚Ä¢ Here's what's happening with your distribution network
    </p>
  </div>

  <!-- Overview Stats Cards -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <StatCard
      client:load
      icon="üì¶"
      label="Total Inventory"
      value={mockDashboardStats.totalInventory}
      subtext="Across all locations"
      color="blue"
    />

    <StatCard
      client:load
      icon="üë•"
      label="Active Distributors"
      value={`${mockDashboardStats.activeDistributors}/${mockDashboardStats.totalDistributors}`}
      subtext="All systems operational"
      color="green"
    />

    <StatCard
      client:load
      icon="‚ö†Ô∏è"
      label="Low Stock Alerts"
      value={mockDashboardStats.lowStockAlerts}
      subtext="Requires attention"
      color="yellow"
    />

    <StatCard
      client:load
      icon="üöö"
      label="Pending Transfers"
      value={mockDashboardStats.pendingTransfers}
      subtext="Awaiting processing"
      color="red"
    />
  </div>

  <!-- Quick Actions Bar -->
  <div class="mb-8 grid grid-cols-2 md:grid-cols-5 gap-3">
    {mockQuickActions.map((action) => (
      <a
        href={action.href}
        class="flex items-center space-x-2 p-4 bg-white rounded-lg shadow border border-gray-200 hover:border-red-500 hover:shadow-md transition-all group"
      >
        <span class="text-2xl">{action.icon}</span>
        <span class="text-sm font-semibold text-gray-900 group-hover:text-red-600">
          {action.label}
        </span>
      </a>
    ))}
  </div>

  <!-- Analytics Grid -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
    <!-- Distributor Status Chart -->
    <div class="bg-white rounded-lg shadow border border-gray-200 p-6">
      <DonutChart
        client:load
        title="Distributor Health Status"
        data={distributorStatusData}
        size={180}
      />
    </div>

    <!-- Regional Distribution Chart -->
    <div class="bg-white rounded-lg shadow border border-gray-200 p-6">
      <BarChart
        client:load
        title="Distributors by Region"
        data={regionDistributionData}
        horizontal={true}
      />
    </div>

    <!-- Product Category Distribution -->
    <div class="bg-white rounded-lg shadow border border-gray-200 p-6">
      <DonutChart
        client:load
        title="Product Categories"
        data={productCategoryData}
        size={180}
      />
    </div>

    <!-- Top Critical Alerts -->
    <div class="bg-white rounded-lg shadow border border-gray-200 p-6">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-sm font-bold text-gray-900">
          ‚ö†Ô∏è Critical Low Stock Alerts
        </h3>
        <a
          href="/inventory/low-stock"
          class="text-sm text-red-600 hover:text-red-700 font-semibold"
        >
          View All ‚Üí
        </a>
      </div>
      <div class="space-y-3">
        {mockLowStockAlerts.slice(0, 3).map((alert) => (
          <div class="flex items-center justify-between p-3 bg-red-50 rounded-lg border border-red-200">
            <div class="flex-1">
              <p class="text-sm font-semibold text-gray-900">{alert.productName}</p>
              <p class="text-xs text-gray-600">{alert.locationName}</p>
            </div>
            <div class="text-right">
              <p class="text-sm font-bold text-red-700">{alert.currentStock}</p>
              <p class="text-xs text-gray-500">Min: {alert.minimumStock}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <!-- Distributor Overview Section - Simplified -->
  <div class="mb-8">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-xl font-bold text-gray-900">
        üìç Distributor Network
      </h3>
      <a
        href="/distributors"
        class="px-4 py-2 bg-white border border-gray-300 text-gray-700 text-sm font-semibold rounded-lg hover:bg-gray-50 transition-colors"
      >
        View All Distributors ‚Üí
      </a>
    </div>

    <!-- Show critical distributors only on dashboard -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
      {mockDistributors
        .filter((d) => d.status === 'critical' || d.status === 'low_stock')
        .map((distributor) => (
          <DistributorCard
            client:load
            distributor={distributor}
            onClick={() => console.log('Clicked:', distributor.code)}
          />
        ))}
    </div>

    <a
      href="/distributors"
      class="block text-center py-3 bg-gray-50 rounded-lg border border-gray-200 text-sm text-gray-600 hover:bg-gray-100 transition-colors"
    >
      + {mockDistributors.filter(d => d.status === 'healthy').length} more healthy distributors
    </a>
  </div>

  <!-- Recent Activity - Compact -->
  <div class="bg-white rounded-lg shadow border border-gray-200 p-6">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-lg font-bold text-gray-900">
        üïí Recent Activity
      </h3>
      <a href="/activity" class="text-sm text-red-600 hover:text-red-700 font-semibold">
        View All ‚Üí
      </a>
    </div>

    <div class="space-y-3">
      {mockRecentActivity.slice(0, 5).map((activity) => (
        <div class="flex items-center space-x-3 pb-3 border-b border-gray-100 last:border-0">
          <span class="text-xl flex-shrink-0">
            {activity.type === 'transfer' && 'üöö'}
            {activity.type === 'sms' && 'üì±'}
            {activity.type === 'product' && 'üì¶'}
            {activity.type === 'adjustment' && 'üìù'}
          </span>
          <div class="flex-1 min-w-0">
            <p class="text-sm text-gray-900">{activity.description}</p>
            <p class="text-xs text-gray-500">{new Date(activity.timestamp).toLocaleString()}</p>
          </div>
        </div>
      ))}
    </div>
  </div>
</MainLayout>
